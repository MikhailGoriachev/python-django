import infrastructure.utils as u
import tasks.task01 as task01
import tasks.task02 as task02
import tasks.task03 as task03
from models.Animal import Animal
from models.Plane import Plane


# Task1. Разработайте класс Plane со следующими свойствами (созданными при помощи декораторов):
#   • тип самолета (Ил-76, Boeing-747, …)
#   • количество пассажирских мест (целое число, от 0 и выше)
#   • текущее количество пассажиров
#   • расход горючего за час полета (вещественное число, от 0 и выше)
#   • количество двигателей (целое число, от 1 до 12)
#   • название авиакомпании владельца самолета (непустая строка)
# В свойствах-сеттерах выбрасывайте исключение при некорректных значениях. Разработайте конструктор __init__() и 
# метод формирования строкового представления __str__() в виде строки таблицы.
# Создайте список самолетов (не менее 10 элементов). Разработайте функции для обработки списка:
#   •	Вывод списка самолетов в виде таблицы
#   •	Увеличение количества пассажиров на введенное с клавиатуры значение
#   •	Удаление выбранного по номеру в списке самолета 
#   •	Реализуйте сортировки списка самолетов:
#       o	По типу самолета
#       o	По убыванию количества двигателей
#       o	По названию авиакомпании владельца самолета
#       o	По убыванию расхода горючего за час полета 
def point01():
    # 1. Список самолётов
    print(u.green_l('\n\n\n1. Список самолётов'))
    task01.show_all()

    # 2. Увеличение количества пассажиров
    print(u.green_l('\n2. Увеличение количества пассажиров'))
    print(u.purple_l('\tВведите количество новых пассажиров: '), end='')
    try:
        value = int(input())
        task01.increase_busy_places(value)
        task01.show_all(f'Количество пассажиров для всех самолётов увеличено на {value}')
    except Exception as ex:
        print('\t' + u.red_l(ex))

    # 3. Удаление выбранного самолёта
    print(u.green_l('\n3. Удаление выбранного самолёта'))
    print(u.purple_l('\tВведите порядковый номер самолёта: '), end='')
    try:
        value = int(input())
        plane = task01.remove_at(value - 1)
        task01.show_all(f'Самолёт с порядковым номеров {value} ({plane.type_plane}) удалён')
    except Exception as ex:
        print('\t' + u.red_l(ex))

    # 4. Сортировки
    print(u.green_l('\n4. Сортировки'))
    Plane.show_table(task01.order_by_type_plane(), 'Сортировка по типу самолета')
    Plane.show_table(task01.order_by_amount_engines_desc(), 'Сортировка по убыванию количества двигателей')
    Plane.show_table(task01.order_by_owner(), 'Сортировка по названию авиакомпании владельца самолета')
    Plane.show_table(task01.order_by_consumption(), 'Сортировка по убыванию расхода горючего за час полета')


# Task2. Создайте класс Animal со свойствами (созданными при помощи декораторов) для хранения:
# •	клички животного, 
# •	веса (в кг), 
# •	возраста (в полных годах), 
# •	цвета (масть) животного, 
# •	фамилии и инициалов владельца (Иванов И.И., …).
# Реализуйте конструктор __init__(), свойства, метод __str__(), метод вывода данных животного в виде строки таблицы. 
# Создайте при помощи конструкторов список из 10 животных, выведите список в консоль. 
# Разработайте функцию, при помощи цикла находящую всех животных, возраст которых больше заданного с клавиатуры. 
# Поместить найденных животных в дополнительный список, удалив животных из исходного списка. Выводите в консоль 
# списки до и после вызова этой функции.
# Реализуйте сортировки списка животных:
# •	По убыванию возраста
# •	По кличке
# •	По возрасту и по цвету (сортировка по двум полям)
# •	По фамилии и инициалам владельца
def point02():
    # 1. Список животных
    print(u.green_l('\n\n\n1. Список животных'))
    task02.show_all()

    # 2. Фильтр по возрасту. Все кто больше указанного возраста выносятся в новый список и удаляются из исходного
    print(u.green_l(
        '\n2. Фильтр по возрасту. Все кто больше указанного возраста выносятся в новый список и удаляются из исходного'))
    print(u.purple_l('\tВведите возраст: '), end='')
    try:
        value = int(input())
        result = task02.filter_by_age_over(value)
        task02.show_all(f'Исходный список')
        Animal.show_table(result, f'Результирующий список')
    except Exception as ex:
        print('\t' + u.red_l(ex))

    # 3. Сортировки
    print(u.green_l('\n3. Сортировки'))
    Animal.show_table(task02.order_by_age_desc(), 'Сортировка по убыванию возраста')
    Animal.show_table(task02.order_by_name(), 'Сортировка по кличке')
    Animal.show_table(task02.order_by_age_and_color(), 'Сортировка по возрасту и по цвету (сортировка по двум полям)')
    Animal.show_table(task02.order_by_owner(), 'Сортировка по фамилии и инициалам владельца')


# Task 3. Создать иерархию классов:
# •	Базовый класс Фигура3D со свойством радиус, пустыми методами для вычисления площади и объема (имеются в виду 
#   объявления вида def area(): pass и def volume(): pass)
# •	Класс Цилиндр, наследует от Фигура3D с методами для вычисления площади и объема
# •	Класс Конус, наследует от Фигура3D с методами для вычисления площади и объема
# •	Класс ТрехграннаяПирамида, наследует от Фигура3D с методами для вычисления площади и объема (правильная 
#   трехгранная пирамида для упрощения вычислений)
# •	реализовать по два объекта каждого типа в списке наследников класса Фигура3D, вычислить суммарную площадь фигур, 
#   суммарный объем фигур
def point03():
    # 1. Список фигур
    print(u.green_l('\n\n\n1. Список фигур'))
    task03.show_all()

    print(u.purple_l(f'\n\tСумма площадей: {u.cyan_l(f"{task03.get_sum_area():.3f}")}'))
    print(u.purple_l(f'\tСумма объёмов : {u.cyan_l(f"{task03.get_sum_volume():.3f}")}'))


if __name__ == "__main__":
    from main import main

    main()
