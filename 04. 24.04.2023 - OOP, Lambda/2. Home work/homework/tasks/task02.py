from models.Animal import Animal

# Task2. Создайте класс Animal со свойствами (созданными при помощи декораторов) для хранения:
# •	клички животного, 
# •	веса (в кг), 
# •	возраста (в полных годах), 
# •	цвета (масть) животного, 
# •	фамилии и инициалов владельца (Иванов И.И., …).
# Реализуйте конструктор __init__(), свойства, метод __str__(), метод вывода данных животного в виде строки таблицы. 
# Создайте при помощи конструкторов список из 10 животных, выведите список в консоль. 
# Разработайте функцию, при помощи цикла находящую всех животных, возраст которых больше заданного с клавиатуры. 
# Поместить найденных животных в дополнительный список, удалив животных из исходного списка. Выводите в консоль 
# списки до и после вызова этой функции.
# Реализуйте сортировки списка животных:
# •	По убыванию возраста
# •	По кличке
# •	По возрасту и по цвету (сортировка по двум полям)
# •	По фамилии и инициалам владельца


animals: list = [
    Animal('Барсик', 3.5, 5, 'рыжий', 'Иванов И.И.'),
    Animal('Мурка', 2.1, 3, 'черный', 'Петров П.П.'),
    Animal('Рыжик', 5.7, 6, 'рыжий', 'Сидоров С.С.'),
    Animal('Тузик', 1.5, 2, 'белый', 'Иванов И.И.'),
    Animal('Белка', 0.7, 1, 'серый', 'Петров П.П.'),
    Animal('Шарик', 4.2, 4, 'черный', 'Сидоров С.С.'),
    Animal('Рыжуля', 2.9, 2, 'рыжий', 'Иванов И.И.'),
    Animal('Черныш', 1.1, 1, 'черный', 'Петров П.П.'),
    Animal('Маркиз', 7.3, 8, 'рыжий', 'Сидоров С.С.'),
    Animal('Муська', 0.9, 1, 'белый', 'Иванов И.И.'),
    Animal('Котофей', 2.5, 3, 'серый', 'Петров П.П.'),
    Animal('Бегемот', 1500, 10, 'серый', 'Сидоров С.С.')
]


# вывод всех записей
def show_all(title='Все животные'):
    Animal.show_table(animals, title)


# при помощи цикла найти всех животных, возраст которых больше заданного 
# Поместить найденных животных в дополнительный список, удалив животных из исходного списка 
def filter_by_age_over(age: int) -> list:
    if age < 0:
        raise IndexError('Возраст должен быть больше 0')

    result = []
    for i in range(len(animals)-1, 0, -1):
        animal = animals[i]
        if animal.age > age:
            result.append(animal)
            animals.pop(i)

    return result


# сортировка по убыванию возраста
def order_by_age_desc():
    return sorted(animals, key=lambda p: p.age, reverse=True)


# сортировка по кличке
def order_by_name():
    return sorted(animals, key=lambda p: p.name)


# сортировка по возрасту и по цвету (сортировка по двум полям)
def order_by_age_and_color():
    return sorted(animals, key=lambda p: (p.age, p.color))


# сортировка по фамилии и инициалам владельца
def order_by_owner():
    return sorted(animals, key=lambda p: p.owner)


if __name__ == "__main__":
    from main import main

    main()
