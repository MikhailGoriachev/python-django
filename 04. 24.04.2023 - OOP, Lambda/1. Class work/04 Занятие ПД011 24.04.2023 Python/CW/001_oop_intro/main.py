# Объектно-ориентированное программирование
# Классы и объекты

# Python поддерживает объектно-ориентированную парадигму программирования,
# а это значит, что мы можем определить компоненты программы в виде классов.

# Класс является шаблоном или формальным описанием объекта, а объект
# представляет экземпляр этого класса, его реальное воплощение. Можно провести
# следующую аналогию: у всех у нас есть некоторое представление о человеке -
# наличие двух рук, двух ног, головы, пищеварительной, нервной системы,
# головного мозга и т.д. Есть некоторый шаблон - этот шаблон можно назвать
# классом. Реально же существующий человек (фактически экземпляр данного
# класса) является объектом этого класса.

# С точки зрения кода класс объединяет набор функций и переменных, которые
# выполняют определенную задачу. Функции класса еще называют методами. Они
# определяют поведение класса. А переменные класса называют атрибутами -
# они хранят состояние класса
from classes import Person, Car, Coordinate3D


# можно импортировать все классы
# import classes

def main():
    '''
    # создание объекта класса Person
    person1 = Person("Tom", 32)     # __init__()
    person1.display_info()  # Привет, меня зовут Tom !!! при вызове метода класса self не указывать !!!
    
    # доступ к атрибутам объектов
    person1.name = "Василий"
    person1.age = 33
    print(f'\nЭто доступ по чтению к атрибутам объекта \033[34;1m{person1.name} {person1.age}\033[0m\n')

    # тут система вызовет __str__() для объекта класса Person
    print(f'{person1}\n')

    # удаление из памяти -- __del__
    del person1

    person2 = Person("Sam", 42)
    person2.display_info()  # Привет, меня зовут Sam
    print(f'{person2}\n')
    '''


    bmw = Car("BMW",  1200000, 'В 888 ВВ 180')
    print(bmw)
    bmw.move(65)
    print(f'{bmw}\n')

    # :( добавили атрибут объекту, не классу
    bmw.owner = 'Саша Белый'
    print(f'{bmw}, {bmw.owner}\n')

    lada = Car('Lada Kalina', 2300000, 'О 001 ОО 180')
    print(f'{lada}\n')


    c1 = Coordinate3D()                # параметры по умолчанию
    c2 = Coordinate3D(x=-1, z=-2)      # передача параметров по имени
    c3 = Coordinate3D(-100, 100, -2)
    print(f'{c1}\n{c2}\n{c3}\n')

# end main


# запуск главной функции приложения
if __name__ == '__main__':
    main()
# end if
