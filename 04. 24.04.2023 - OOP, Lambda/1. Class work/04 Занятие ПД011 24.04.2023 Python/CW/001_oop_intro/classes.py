# Класс Person определяет атрибуты name, age  и метод display_info

# При определении методов любого класса следует учитывать, что все они должны
# принимать в качестве первого параметра ссылку на текущий объект, который
# согласно условностям называется self (в ряде языков программирования есть
# своего рода аналог - ключевое слово this). Через эту ссылку внутри класса мы
# можем обратиться к методам или атрибутам этого же класса.
# В частности, через выражение self.name можно получить имя пользователя.


class Person:

    # конструктор
    # self - обязательно !!!
    # список начальных значений полей класса
    def __init__(self, name, age):
        self.name = name  # устанавливаем атрибут имя     - атрибут класса
        self.age = age    # устанавливаем атрибут возраст - атрибут класса

    # метод класса
    def display_info(self):
        print(f"Привет, меня зовут {self.name}, мой возраст в годах: {self.age}")

    # деструктор - не обязателен, будет вызываться либо в результате вызова
    # оператора del, либо при автоматическом удалении объекта
    def __del__(self):
        print(f"{self.name} удален из памяти")

    # Начиная с 3-й версии Python все классы неявно имеют один общий суперкласс
    # object и все классы по умолчанию наследуют его методы (о наследовании
    # говорим позже)
    # Одним из наиболее используемых методов класса object является метод
    # __str__(). Когда необходимо получить строковое представление объекта или
    # вывести объект в виде строки, то Python как раз вызывает этот метод. И при
    # определении класса хорошей практикой считается переопределение этого метода.   
    def __str__(self):
        return f'Имя: {self.name}, возраст в годах: {self.age}'
# class Person


# класс представляет автомобиль, имеет метод move и атрибуты name, price, reg_number
class Car:
    # конструктор
    def __init__(self, name, price, reg_number):
        self.name = name                       # название модели - свойство класса
        self.price = price                     # цена            - свойство класса
        self.reg_number = reg_number           # гос. номер      - свойство класса
        self.speed = 0                         # скорость, не присваиваем начального значения

    # метод класса
    def move(self, speed):
        self.speed = speed

    # Начиная с 3-й версии Python все классы неявно имеют один общий суперкласс
    # object и все классы по умолчанию наследуют его методы (о наследовании
    # говорим позже)
    # Одним из наиболее используемых методов класса object является метод
    # __str__(). Когда необходимо получить строковое представление объекта или
    # вывести объект в виде строки, то Python как раз вызывает этот метод. И при
    # определении класса хорошей практикой считается переопределение этого метода.
    def __str__(self):
        return f'модель: {self.name}, цена {self.price} р., ' \
               f'гос. номер: {self.reg_number}, ' \
               f'скорость {self.speed} км/ч'
# class Car


# Класс для 3D координат - пример параметров по умолчанию
class Coordinate3D:

    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z

    # Начиная с 3-й версии Python все классы неявно имеют один общий суперкласс
    # object и все классы по умолчанию наследуют его методы (о наследовании
    # говорим позже)
    # Одним из наиболее используемых методов класса object является метод
    # __str__(). Когда необходимо получить строковое представление объекта или
    # вывести объект в виде строки, то Python как раз вызывает этот метод. И при
    # определении класса хорошей практикой считается переопределение этого метода.
    def __str__(self):
        return f'({self.x},{self.y},{self.z})'
# class Coordinate3D
