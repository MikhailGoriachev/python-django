# Модули в Python
# Модуль в языке Python представляет отдельный файл с кодом, который можно повторно
# использовать в других программах

# Для создания модуля необходимо создать собственно файл с расширением *.py, который
# будет представлять модуль. Имя файла == имя модуля.
# Затем в этом файле надо определить одну или несколько функций

# импорт модуля, всех его функций, функции доступны по синтаксису
# имяМодуля.имяФункции(), в этом случае имяМодуля называется простарнством имен
import functions

# можно импортировать несколько модулей одним оператором
# import модуль1, модуль2, ..., модульN
# import random, math

# еще вариант импорта - явно импортируем конкретную функцию из модуля
# from модуль import функция
# доступ к такой функции - просто по ее имени, при этом возможен конфликт имен...
from functions import bar

# имя этой функции будет конфликтовать с functuins.bar() при явном
# импорте bar из functions
# def bar():
#    print(f'bar: функция из модуля \033[1m{__name__}\033[0m')
# # end bar

# импорт модуля с назначением названия пространсва имен
# import имяМодуля as пространствоИмен
import utils as arifm

'''
functions.foo()
functions.bar()
bar()

x = arifm.mul(2, 3)
print(f'2 * 3 = {x}')
'''

# функция, которую мы считаем главной :)
def main():
    # __name__ - системная переменная, хранит имя модуля
    print(f'{__name__}: начало работы\n')

    # вызов функций из модуля  functions, functions - также пространство имен
    functions.foo()
    functions.bar()

    print()

    # вызов функции, которую явно импортировали из модуля
    # при раскомментировании bar() в этом модуле - вызывается, конечно,
    # main.bar
    bar()

    print('\nПример использования функций из еще одного модуля:')
    x = 1
    y = 2

    z = arifm.add(x, y)
    print(f'add: {x} + {y} = {z}')
    z = arifm.sub(x, y)
    print(f'sub: {x} - {y} = {z}')
    z = arifm.mul(x, y)
    print(f'mul: {x} * {y} = {z}')

    print(f'\n{__name__}: конец работы', end='')
# end main


# исполняемый код для обеспечения запуска функции main()
# модулю, который стартует, всегда присваивается имя '__main__'
if __name__ == '__main__':
    main()
# end if
